
type Dapp {
	id: ID!
	name: String!
	description: String!
	repository: String!
	publishedDate: Int!
	scopeId: String!
	scope: Scope
}

type DappConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DappEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Dapp!]!
	metadata: PaginationInfo
}

"""
An edge in a connection.
"""
type DappEdge {
	"""
	The item at the end of the edge
	"""
	node: Dapp!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}




"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PaginationInfo {
	totalNodes: Int!
	pageSize: Int!
}

type Query {
	dapps(after: String, before: String, first: Int, last: Int): DappConnection!
	dapp(id: ID, input: SearchDAppByScope): Dapp
	scopes(after: String, before: String, first: Int, last: Int): ScopeConnection!
	scope(id: ID!): Scope
}

type Scope {
	id: ID!
	name: String!
	repository: String!
	dapps: [Dapp!]!
}

type ScopeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ScopeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Scope!]!
	metadata: PaginationInfo
}

"""
An edge in a connection.
"""
type ScopeEdge {
	"""
	The item at the end of the edge
	"""
	node: Scope!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input SearchDAppByScope {
	name: String!
	scopeName: String!
}


directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
}
